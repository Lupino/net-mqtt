-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | An MQTT Protocol Implementation.
--   
--   Please see the README on GitHub at
--   <a>https://github.com/dustin/mqtt-hs#readme</a>
@package net-mqtt
@version 0.7.0.1


-- | Topic and topic related utiilities.
module Network.MQTT.Topic

-- | An MQTT topic filter.
type Filter = Text

-- | An MQTT topic.
type Topic = Text

-- | match returns true iff the given pattern can be matched by the
--   specified Topic as defined in the <a>MQTT 3.1.1 specification</a>.
match :: Filter -> Topic -> Bool


-- | MQTT Types.
module Network.MQTT.Types

-- | An MQTT Will message.
data LastWill
LastWill :: Bool -> QoS -> ByteString -> ByteString -> [Property] -> LastWill
[_willRetain] :: LastWill -> Bool
[_willQoS] :: LastWill -> QoS
[_willTopic] :: LastWill -> ByteString
[_willMsg] :: LastWill -> ByteString
[_willProps] :: LastWill -> [Property]
data MQTTPkt
ConnPkt :: ConnectRequest -> ProtocolLevel -> MQTTPkt
ConnACKPkt :: ConnACKFlags -> MQTTPkt
PublishPkt :: PublishRequest -> MQTTPkt
PubACKPkt :: PubACK -> MQTTPkt
PubRECPkt :: PubREC -> MQTTPkt
PubRELPkt :: PubREL -> MQTTPkt
PubCOMPPkt :: PubCOMP -> MQTTPkt
SubscribePkt :: SubscribeRequest -> MQTTPkt
SubACKPkt :: SubscribeResponse -> MQTTPkt
UnsubscribePkt :: UnsubscribeRequest -> MQTTPkt
UnsubACKPkt :: UnsubscribeResponse -> MQTTPkt
PingPkt :: MQTTPkt
PongPkt :: MQTTPkt
DisconnectPkt :: DisconnectRequest -> MQTTPkt
AuthPkt :: AuthRequest -> MQTTPkt

-- | QoS values for publishing and subscribing.
data QoS
QoS0 :: QoS
QoS1 :: QoS
QoS2 :: QoS
data ConnectRequest
ConnectRequest :: Maybe ByteString -> Maybe ByteString -> Maybe LastWill -> Bool -> Word16 -> ByteString -> [Property] -> ConnectRequest
[_username] :: ConnectRequest -> Maybe ByteString
[_password] :: ConnectRequest -> Maybe ByteString
[_lastWill] :: ConnectRequest -> Maybe LastWill
[_cleanSession] :: ConnectRequest -> Bool
[_keepAlive] :: ConnectRequest -> Word16
[_connID] :: ConnectRequest -> ByteString
[_connProperties] :: ConnectRequest -> [Property]
connectRequest :: ConnectRequest
data SessionReuse
NewSession :: SessionReuse
ExistingSession :: SessionReuse

-- | Connection acknowledgment details.
data ConnACKFlags
ConnACKFlags :: SessionReuse -> ConnACKRC -> [Property] -> ConnACKFlags
data ConnACKRC
ConnAccepted :: ConnACKRC
UnacceptableProtocol :: ConnACKRC
IdentifierRejected :: ConnACKRC
ServerUnavailable :: ConnACKRC
BadCredentials :: ConnACKRC
NotAuthorized :: ConnACKRC
ConnUnspecifiedError :: ConnACKRC
ConnMalformedPacket :: ConnACKRC
ConnProtocolError :: ConnACKRC
ConnImplementationSpecificError :: ConnACKRC
ConnUnsupportedProtocolVersion :: ConnACKRC
ConnClientIdentifierNotValid :: ConnACKRC
ConnBadUserNameOrPassword :: ConnACKRC
ConnNotAuthorized :: ConnACKRC
ConnServerUnavailable :: ConnACKRC
ConnServerBusy :: ConnACKRC
ConnBanned :: ConnACKRC
ConnBadAuthenticationMethod :: ConnACKRC
ConnTopicNameInvalid :: ConnACKRC
ConnPacketTooLarge :: ConnACKRC
ConnQuotaExceeded :: ConnACKRC
ConnPayloadFormatInvalid :: ConnACKRC
ConnRetainNotSupported :: ConnACKRC
ConnQosNotSupported :: ConnACKRC
ConnUseAnotherServer :: ConnACKRC
ConnServerMoved :: ConnACKRC
ConnConnectionRateExceeded :: ConnACKRC
data PublishRequest
PublishRequest :: Bool -> QoS -> Bool -> ByteString -> PktID -> ByteString -> [Property] -> PublishRequest
[_pubDup] :: PublishRequest -> Bool
[_pubQoS] :: PublishRequest -> QoS
[_pubRetain] :: PublishRequest -> Bool
[_pubTopic] :: PublishRequest -> ByteString
[_pubPktID] :: PublishRequest -> PktID
[_pubBody] :: PublishRequest -> ByteString
[_pubProps] :: PublishRequest -> [Property]
data PubACK
PubACK :: PktID -> Word8 -> [Property] -> PubACK
data PubREC
PubREC :: PktID -> Word8 -> [Property] -> PubREC
data PubREL
PubREL :: PktID -> Word8 -> [Property] -> PubREL
data PubCOMP
PubCOMP :: PktID -> Word8 -> [Property] -> PubCOMP

-- | MQTT Protocol Levels
data ProtocolLevel

-- | MQTT 3.1.1
Protocol311 :: ProtocolLevel

-- | MQTT 5.0
Protocol50 :: ProtocolLevel

-- | Property represents the various MQTT Properties that may sent or
--   received along with packets in MQTT 5. For detailed use on when and
--   where to use them, consult with the MQTT 5.0 spec.
data Property
PropPayloadFormatIndicator :: Word8 -> Property
PropMessageExpiryInterval :: Word32 -> Property
PropContentType :: ByteString -> Property
PropResponseTopic :: ByteString -> Property
PropCorrelationData :: ByteString -> Property
PropSubscriptionIdentifier :: Int -> Property
PropSessionExpiryInterval :: Word32 -> Property
PropAssignedClientIdentifier :: ByteString -> Property
PropServerKeepAlive :: Word16 -> Property
PropAuthenticationMethod :: ByteString -> Property
PropAuthenticationData :: ByteString -> Property
PropRequestProblemInformation :: Word8 -> Property
PropWillDelayInterval :: Word32 -> Property
PropRequestResponseInformation :: Word8 -> Property
PropResponseInformation :: ByteString -> Property
PropServerReference :: ByteString -> Property
PropReasonString :: ByteString -> Property
PropReceiveMaximum :: Word16 -> Property
PropTopicAliasMaximum :: Word16 -> Property
PropTopicAlias :: Word16 -> Property
PropMaximumQoS :: Word8 -> Property
PropRetainAvailable :: Word8 -> Property
PropUserProperty :: ByteString -> ByteString -> Property
PropMaximumPacketSize :: Word32 -> Property
PropWildcardSubscriptionAvailable :: Word8 -> Property
PropSubscriptionIdentifierAvailable :: Word8 -> Property
PropSharedSubscriptionAvailable :: Word8 -> Property
data AuthRequest
AuthRequest :: Word8 -> [Property] -> AuthRequest
data SubscribeRequest
SubscribeRequest :: PktID -> [(ByteString, SubOptions)] -> [Property] -> SubscribeRequest

-- | Options used at subscribe time to define how to handle incoming
--   messages.
data SubOptions
SubOptions :: RetainHandling -> Bool -> Bool -> QoS -> SubOptions

-- | How to handle existing retained messages.
[_retainHandling] :: SubOptions -> RetainHandling

-- | If true, retain is propagated on subscribe.
[_retainAsPublished] :: SubOptions -> Bool

-- | If true, do not send messages initiated from this client back.
[_noLocal] :: SubOptions -> Bool

-- | Maximum QoS to use for this subscription.
[_subQoS] :: SubOptions -> QoS

-- | Reasonable subscription option defaults at <a>QoS0</a>.
subOptions :: SubOptions
data SubscribeResponse
SubscribeResponse :: PktID -> [Either SubErr QoS] -> [Property] -> SubscribeResponse
data SubErr
SubErrUnspecifiedError :: SubErr
SubErrImplementationSpecificError :: SubErr
SubErrNotAuthorized :: SubErr
SubErrTopicFilterInvalid :: SubErr
SubErrPacketIdentifierInUse :: SubErr
SubErrQuotaExceeded :: SubErr
SubErrSharedSubscriptionsNotSupported :: SubErr
SubErrSubscriptionIdentifiersNotSupported :: SubErr
SubErrWildcardSubscriptionsNotSupported :: SubErr

-- | How to process retained messages on subscriptions.
data RetainHandling

-- | Send existing retained messages to a new client.
SendOnSubscribe :: RetainHandling

-- | Send existing retained messages that have not yet been sent.
SendOnSubscribeNew :: RetainHandling

-- | Don't send existing retained messages.
DoNotSendOnSubscribe :: RetainHandling
data DisconnectRequest
DisconnectRequest :: DiscoReason -> [Property] -> DisconnectRequest
data UnsubscribeRequest
UnsubscribeRequest :: PktID -> [ByteString] -> [Property] -> UnsubscribeRequest
data UnsubscribeResponse
UnsubscribeResponse :: PktID -> [Property] -> [UnsubStatus] -> UnsubscribeResponse
data UnsubStatus
UnsubSuccess :: UnsubStatus
UnsubNoSubscriptionExisted :: UnsubStatus
UnsubUnspecifiedError :: UnsubStatus
UnsubImplementationSpecificError :: UnsubStatus
UnsubNotAuthorized :: UnsubStatus
UnsubTopicFilterInvalid :: UnsubStatus
UnsubPacketIdentifierInUse :: UnsubStatus
data DiscoReason
DiscoNormalDisconnection :: DiscoReason
DiscoDisconnectWithWill :: DiscoReason
DiscoUnspecifiedError :: DiscoReason
DiscoMalformedPacket :: DiscoReason
DiscoProtocolError :: DiscoReason
DiscoImplementationSpecificError :: DiscoReason
DiscoNotAuthorized :: DiscoReason
DiscoServerBusy :: DiscoReason
DiscoServershuttingDown :: DiscoReason
DiscoKeepAliveTimeout :: DiscoReason
DiscoSessiontakenOver :: DiscoReason
DiscoTopicFilterInvalid :: DiscoReason
DiscoTopicNameInvalid :: DiscoReason
DiscoReceiveMaximumExceeded :: DiscoReason
DiscoTopicAliasInvalid :: DiscoReason
DiscoPacketTooLarge :: DiscoReason
DiscoMessageRateTooHigh :: DiscoReason
DiscoQuotaExceeded :: DiscoReason
DiscoAdministrativeAction :: DiscoReason
DiscoPayloadFormatInvalid :: DiscoReason
DiscoRetainNotSupported :: DiscoReason
DiscoQoSNotSupported :: DiscoReason
DiscoUseAnotherServer :: DiscoReason
DiscoServerMoved :: DiscoReason
DiscoSharedSubscriptionsNotSupported :: DiscoReason
DiscoConnectionRateExceeded :: DiscoReason
DiscoMaximumConnectTime :: DiscoReason
DiscoSubscriptionIdentifiersNotSupported :: DiscoReason
DiscoWildcardSubscriptionsNotSupported :: DiscoReason
type PktID = Word16
parsePacket :: ProtocolLevel -> Parser MQTTPkt
class ByteMe a
toByteString :: ByteMe a => ProtocolLevel -> a -> ByteString

-- | Parse a CONNect packet. This is useful when examining the beginning of
--   the stream as it allows you to determine the protocol being used
--   throughout the rest of the session.
parseConnect :: Parser MQTTPkt
encodeLength :: Int -> [Word8]
parseHdrLen :: Parser Int
parseProperty :: Parser Property
parseProperties :: ProtocolLevel -> Parser [Property]
bsProps :: ProtocolLevel -> [Property] -> ByteString
parseSubOptions :: Parser SubOptions
class ByteSize a
toByte :: ByteSize a => a -> Word8
fromByte :: ByteSize a => Word8 -> a
instance GHC.Show.Show Network.MQTT.Types.MQTTPkt
instance GHC.Classes.Eq Network.MQTT.Types.MQTTPkt
instance GHC.Show.Show Network.MQTT.Types.DisconnectRequest
instance GHC.Classes.Eq Network.MQTT.Types.DisconnectRequest
instance GHC.Enum.Enum Network.MQTT.Types.DiscoReason
instance GHC.Enum.Bounded Network.MQTT.Types.DiscoReason
instance GHC.Classes.Eq Network.MQTT.Types.DiscoReason
instance GHC.Show.Show Network.MQTT.Types.DiscoReason
instance GHC.Show.Show Network.MQTT.Types.AuthRequest
instance GHC.Classes.Eq Network.MQTT.Types.AuthRequest
instance GHC.Show.Show Network.MQTT.Types.UnsubscribeResponse
instance GHC.Classes.Eq Network.MQTT.Types.UnsubscribeResponse
instance GHC.Enum.Enum Network.MQTT.Types.UnsubStatus
instance GHC.Enum.Bounded Network.MQTT.Types.UnsubStatus
instance GHC.Classes.Eq Network.MQTT.Types.UnsubStatus
instance GHC.Show.Show Network.MQTT.Types.UnsubStatus
instance GHC.Show.Show Network.MQTT.Types.UnsubscribeRequest
instance GHC.Classes.Eq Network.MQTT.Types.UnsubscribeRequest
instance GHC.Show.Show Network.MQTT.Types.SubscribeResponse
instance GHC.Classes.Eq Network.MQTT.Types.SubscribeResponse
instance GHC.Enum.Enum Network.MQTT.Types.SubErr
instance GHC.Enum.Bounded Network.MQTT.Types.SubErr
instance GHC.Show.Show Network.MQTT.Types.SubErr
instance GHC.Classes.Eq Network.MQTT.Types.SubErr
instance GHC.Show.Show Network.MQTT.Types.PubCOMP
instance GHC.Classes.Eq Network.MQTT.Types.PubCOMP
instance GHC.Show.Show Network.MQTT.Types.PubREL
instance GHC.Classes.Eq Network.MQTT.Types.PubREL
instance GHC.Show.Show Network.MQTT.Types.PubREC
instance GHC.Classes.Eq Network.MQTT.Types.PubREC
instance GHC.Show.Show Network.MQTT.Types.PubACK
instance GHC.Classes.Eq Network.MQTT.Types.PubACK
instance GHC.Show.Show Network.MQTT.Types.SubscribeRequest
instance GHC.Classes.Eq Network.MQTT.Types.SubscribeRequest
instance GHC.Show.Show Network.MQTT.Types.SubOptions
instance GHC.Classes.Eq Network.MQTT.Types.SubOptions
instance GHC.Enum.Enum Network.MQTT.Types.RetainHandling
instance GHC.Enum.Bounded Network.MQTT.Types.RetainHandling
instance GHC.Show.Show Network.MQTT.Types.RetainHandling
instance GHC.Classes.Eq Network.MQTT.Types.RetainHandling
instance GHC.Show.Show Network.MQTT.Types.PublishRequest
instance GHC.Classes.Eq Network.MQTT.Types.PublishRequest
instance GHC.Show.Show Network.MQTT.Types.ConnACKFlags
instance GHC.Classes.Eq Network.MQTT.Types.ConnACKFlags
instance GHC.Enum.Enum Network.MQTT.Types.SessionReuse
instance GHC.Enum.Bounded Network.MQTT.Types.SessionReuse
instance GHC.Classes.Eq Network.MQTT.Types.SessionReuse
instance GHC.Show.Show Network.MQTT.Types.SessionReuse
instance GHC.Enum.Enum Network.MQTT.Types.ConnACKRC
instance GHC.Enum.Bounded Network.MQTT.Types.ConnACKRC
instance GHC.Show.Show Network.MQTT.Types.ConnACKRC
instance GHC.Classes.Eq Network.MQTT.Types.ConnACKRC
instance GHC.Show.Show Network.MQTT.Types.ConnectRequest
instance GHC.Classes.Eq Network.MQTT.Types.ConnectRequest
instance GHC.Show.Show Network.MQTT.Types.LastWill
instance GHC.Classes.Eq Network.MQTT.Types.LastWill
instance GHC.Show.Show Network.MQTT.Types.ProtocolLevel
instance GHC.Classes.Eq Network.MQTT.Types.ProtocolLevel
instance GHC.Enum.Enum Network.MQTT.Types.ProtocolLevel
instance GHC.Enum.Bounded Network.MQTT.Types.ProtocolLevel
instance GHC.Classes.Eq Network.MQTT.Types.Property
instance GHC.Show.Show Network.MQTT.Types.Property
instance GHC.Classes.Ord Network.MQTT.Types.QoS
instance GHC.Show.Show Network.MQTT.Types.QoS
instance GHC.Classes.Eq Network.MQTT.Types.QoS
instance GHC.Enum.Enum Network.MQTT.Types.QoS
instance GHC.Enum.Bounded Network.MQTT.Types.QoS
instance Network.MQTT.Types.ByteMe Network.MQTT.Types.MQTTPkt
instance Network.MQTT.Types.ByteMe Network.MQTT.Types.DisconnectRequest
instance Network.MQTT.Types.ByteSize Network.MQTT.Types.DiscoReason
instance Network.MQTT.Types.ByteMe Network.MQTT.Types.AuthRequest
instance Network.MQTT.Types.ByteMe Network.MQTT.Types.UnsubscribeResponse
instance Network.MQTT.Types.ByteMe Network.MQTT.Types.UnsubStatus
instance Network.MQTT.Types.ByteMe Network.MQTT.Types.UnsubscribeRequest
instance Network.MQTT.Types.ByteMe Network.MQTT.Types.SubscribeResponse
instance Network.MQTT.Types.ByteMe Network.MQTT.Types.PubCOMP
instance Network.MQTT.Types.ByteMe Network.MQTT.Types.PubREL
instance Network.MQTT.Types.ByteMe Network.MQTT.Types.PubREC
instance Network.MQTT.Types.ByteMe Network.MQTT.Types.PubACK
instance Network.MQTT.Types.ByteMe Network.MQTT.Types.SubscribeRequest
instance Network.MQTT.Types.ByteMe Network.MQTT.Types.SubOptions
instance Network.MQTT.Types.ByteMe Network.MQTT.Types.PublishRequest
instance Network.MQTT.Types.ByteMe Network.MQTT.Types.ConnACKFlags
instance Network.MQTT.Types.ByteSize Network.MQTT.Types.ConnACKRC
instance Network.MQTT.Types.ByteMe Network.MQTT.Types.ConnectRequest
instance Network.MQTT.Types.ByteMe Data.ByteString.Lazy.Internal.ByteString
instance Network.MQTT.Types.ByteMe Network.MQTT.Types.Property
instance Network.MQTT.Types.ByteMe Network.MQTT.Types.ProtocolLevel


-- | An MQTT protocol client
--   
--   Both <a>MQTT 3.1.1</a> and <a>MQTT 5.0</a> are supported over plain
--   TCP, TLS, WebSockets and Secure WebSockets.
module Network.MQTT.Client

-- | Configuration for setting up an MQTT client.
data MQTTConfig
MQTTConfig :: Bool -> Maybe LastWill -> MessageCallback -> ProtocolLevel -> [Property] -> String -> Int -> String -> Maybe String -> Maybe String -> Int -> TLSSettings -> MQTTConfig

-- | False if a session should be reused.
[_cleanSession] :: MQTTConfig -> Bool

-- | LastWill message to be sent on client disconnect.
[_lwt] :: MQTTConfig -> Maybe LastWill

-- | Callback for incoming messages.
[_msgCB] :: MQTTConfig -> MessageCallback

-- | Protocol to use for the connection.
[_protocol] :: MQTTConfig -> ProtocolLevel

-- | Properties to send to the broker in the CONNECT packet.
[_connProps] :: MQTTConfig -> [Property]

-- | Host to connect to (parsed from the URI)
[_hostname] :: MQTTConfig -> String

-- | Port number (parsed from the URI)
[_port] :: MQTTConfig -> Int

-- | Unique connection ID (parsed from the URI)
[_connID] :: MQTTConfig -> String

-- | Optional username (parsed from the URI)
[_username] :: MQTTConfig -> Maybe String

-- | Optional password (parsed from the URI)
[_password] :: MQTTConfig -> Maybe String

-- | Connection timeout (microseconds)
[_connectTimeout] :: MQTTConfig -> Int

-- | TLS Settings for secure connections
[_tlsSettings] :: MQTTConfig -> TLSSettings

-- | The MQTT client.
--   
--   See <a>connectURI</a> for the most straightforward example.
data MQTTClient

-- | QoS values for publishing and subscribing.
data QoS
QoS0 :: QoS
QoS1 :: QoS
QoS2 :: QoS

-- | An MQTT topic.
type Topic = Text

-- | A default <a>MQTTConfig</a>. A <a>_connID</a> <i>may</i> be required
--   depending on your broker (or if you just want an
--   identifiable/resumable connection). In MQTTv5, an empty connection ID
--   may be sent and the server may assign an identifier for you and return
--   it in the <a>PropAssignedClientIdentifier</a> <a>Property</a>.
mqttConfig :: MQTTConfig

-- | A convenience method for creating a <a>LastWill</a>.
mkLWT :: Topic -> ByteString -> Bool -> LastWill

-- | An MQTT Will message.
data LastWill
LastWill :: Bool -> QoS -> ByteString -> ByteString -> [Property] -> LastWill
[_willRetain] :: LastWill -> Bool
[_willQoS] :: LastWill -> QoS
[_willTopic] :: LastWill -> ByteString
[_willMsg] :: LastWill -> ByteString
[_willProps] :: LastWill -> [Property]

-- | MQTT Protocol Levels
data ProtocolLevel

-- | MQTT 3.1.1
Protocol311 :: ProtocolLevel

-- | MQTT 5.0
Protocol50 :: ProtocolLevel

-- | Property represents the various MQTT Properties that may sent or
--   received along with packets in MQTT 5. For detailed use on when and
--   where to use them, consult with the MQTT 5.0 spec.
data Property
PropPayloadFormatIndicator :: Word8 -> Property
PropMessageExpiryInterval :: Word32 -> Property
PropContentType :: ByteString -> Property
PropResponseTopic :: ByteString -> Property
PropCorrelationData :: ByteString -> Property
PropSubscriptionIdentifier :: Int -> Property
PropSessionExpiryInterval :: Word32 -> Property
PropAssignedClientIdentifier :: ByteString -> Property
PropServerKeepAlive :: Word16 -> Property
PropAuthenticationMethod :: ByteString -> Property
PropAuthenticationData :: ByteString -> Property
PropRequestProblemInformation :: Word8 -> Property
PropWillDelayInterval :: Word32 -> Property
PropRequestResponseInformation :: Word8 -> Property
PropResponseInformation :: ByteString -> Property
PropServerReference :: ByteString -> Property
PropReasonString :: ByteString -> Property
PropReceiveMaximum :: Word16 -> Property
PropTopicAliasMaximum :: Word16 -> Property
PropTopicAlias :: Word16 -> Property
PropMaximumQoS :: Word8 -> Property
PropRetainAvailable :: Word8 -> Property
PropUserProperty :: ByteString -> ByteString -> Property
PropMaximumPacketSize :: Word32 -> Property
PropWildcardSubscriptionAvailable :: Word8 -> Property
PropSubscriptionIdentifierAvailable :: Word8 -> Property
PropSharedSubscriptionAvailable :: Word8 -> Property

-- | Options used at subscribe time to define how to handle incoming
--   messages.
data SubOptions
SubOptions :: RetainHandling -> Bool -> Bool -> QoS -> SubOptions

-- | How to handle existing retained messages.
[_retainHandling] :: SubOptions -> RetainHandling

-- | If true, retain is propagated on subscribe.
[_retainAsPublished] :: SubOptions -> Bool

-- | If true, do not send messages initiated from this client back.
[_noLocal] :: SubOptions -> Bool

-- | Maximum QoS to use for this subscription.
[_subQoS] :: SubOptions -> QoS

-- | Reasonable subscription option defaults at <a>QoS0</a>.
subOptions :: SubOptions

-- | Callback invoked on each incoming subscribed message.
data MessageCallback
NoCallback :: MessageCallback
SimpleCallback :: (MQTTClient -> Topic -> ByteString -> [Property] -> IO ()) -> MessageCallback
LowLevelCallback :: (MQTTClient -> PublishRequest -> IO ()) -> MessageCallback

-- | Wait for a client to terminate its connection. An exception is thrown
--   if the client didn't terminate expectedly.
waitForClient :: MQTTClient -> IO ()

-- | Connect to an MQTT server by URI.
--   
--   <tt>mqtt://</tt>, <tt>mqtts://</tt>, <tt>ws://</tt>, and
--   <tt>wss://</tt> URLs are supported. The host, port, username, and
--   password will be derived from the URI and the values supplied in the
--   config will be ignored.
--   
--   <pre>
--   main :: IO
--   main = do
--     let (Just uri) = parseURI "mqtt://test.mosquitto.org"
--     mc &lt;- connectURI mqttConfig{} uri
--     publish mc "tmp/topic" "hello!" False
--   </pre>
connectURI :: MQTTConfig -> URI -> IO MQTTClient

-- | True if we're currently in a normally connected state (in the IO
--   monad).
isConnected :: MQTTClient -> IO Bool

-- | Disconnect from the MQTT server.
disconnect :: MQTTClient -> DiscoReason -> [Property] -> IO ()

-- | Disconnect with <a>DiscoNormalDisconnection</a> and no properties.
normalDisconnect :: MQTTClient -> IO ()

-- | Subscribe to a list of topic filters with their respective
--   <a>QoS</a>es. The accepted <a>QoS</a>es are returned in the same order
--   as requested.
subscribe :: MQTTClient -> [(Filter, SubOptions)] -> [Property] -> IO ([Either SubErr QoS], [Property])

-- | Unsubscribe from a list of topic filters.
--   
--   In MQTT 3.1.1, there is no body to an unsubscribe response, so it can
--   be ignored. If this returns, you were unsubscribed. In MQTT 5, you'll
--   get a list of unsub status values corresponding to your request
--   filters, and whatever properties the server thought you should know
--   about.
unsubscribe :: MQTTClient -> [Filter] -> [Property] -> IO ([UnsubStatus], [Property])

-- | Publish a message (QoS 0).
publish :: MQTTClient -> Topic -> ByteString -> Bool -> IO ()

-- | Publish a message with the specified QoS and Properties list.
publishq :: MQTTClient -> Topic -> ByteString -> Bool -> QoS -> [Property] -> IO ()

-- | Publish a message with the specified <a>QoS</a> and <a>Property</a>
--   list. If possible, use an alias to shorten the message length. The
--   alias list is managed by the client in a first-come, first-served
--   basis, so if you use this with more properties than the broker allows,
--   only the first N (up to TopicAliasMaximum, as specified by the broker
--   at connect time) will be aliased.
--   
--   This is safe to use as a general publish mechanism, as it will default
--   to not aliasing whenver there's not already an alias and we can't
--   create any more.
pubAliased :: MQTTClient -> Topic -> ByteString -> Bool -> QoS -> [Property] -> IO ()

-- | Get the list of properties that were sent from the broker at connect
--   time.
svrProps :: MQTTClient -> IO [Property]

-- | Get the complete connection aCK packet from the beginning of this
--   session.
connACK :: MQTTClient -> IO ConnACKFlags
data MQTTException
Timeout :: MQTTException
BadData :: MQTTException
Discod :: DisconnectRequest -> MQTTException
MQTTException :: String -> MQTTException

-- | Set up and run a client with a conduit context function.
--   
--   The provided action calls another IO action with a <a>MQTTConduit</a>
--   as a parameter. It is expected that this action will manage the
--   lifecycle of the conduit source/sink on behalf of the client.
runMQTTConduit :: ((MQTTConduit -> IO ()) -> IO ()) -> MQTTConfig -> IO MQTTClient

-- | MQTTConduit provides a source and sink for data as used by
--   <a>runMQTTConduit</a>.
type MQTTConduit = (ConduitT () ByteString IO (), ConduitT ByteString Void IO ())

-- | True if we're currently in a normally connected state (in the STM
--   monad).
isConnectedSTM :: MQTTClient -> STM Bool

-- | Get the complete connection ACK packet from the beginning of this
--   session.
connACKSTM :: MQTTClient -> STM ConnACKFlags

-- | Register a callback handler for a message with the given correlated
--   data identifier.
--   
--   This registration will remain in place until unregisterCorrelated is
--   called to remove it.
registerCorrelated :: MQTTClient -> ByteString -> MessageCallback -> STM ()

-- | Unregister a callback handler for the given correlated data
--   identifier.
unregisterCorrelated :: MQTTClient -> ByteString -> STM ()
instance GHC.Show.Show Network.MQTT.Client.MQTTException
instance GHC.Classes.Eq Network.MQTT.Client.MQTTException
instance GHC.Enum.Bounded Network.MQTT.Client.DispatchType
instance GHC.Enum.Enum Network.MQTT.Client.DispatchType
instance GHC.Classes.Ord Network.MQTT.Client.DispatchType
instance GHC.Show.Show Network.MQTT.Client.DispatchType
instance GHC.Classes.Eq Network.MQTT.Client.DispatchType
instance GHC.Show.Show Network.MQTT.Client.ConnState
instance GHC.Classes.Eq Network.MQTT.Client.ConnState
instance GHC.Exception.Type.Exception Network.MQTT.Client.MQTTException


-- | Arbitrary instances for QuickCheck.
module Network.MQTT.Arbitrary

-- | Arbitrary type fitting variable integers.
newtype SizeT
SizeT :: Int -> SizeT

-- | v311mask strips all the v5 specific bits from an MQTTPkt.
v311mask :: MQTTPkt -> MQTTPkt
instance GHC.Show.Show Network.MQTT.Arbitrary.SizeT
instance GHC.Classes.Eq Network.MQTT.Arbitrary.SizeT
instance Test.QuickCheck.Arbitrary.Arbitrary Network.MQTT.Arbitrary.SizeT
instance Test.QuickCheck.Arbitrary.Arbitrary Network.MQTT.Types.LastWill
instance Test.QuickCheck.Arbitrary.Arbitrary Network.MQTT.Types.ProtocolLevel
instance Test.QuickCheck.Arbitrary.Arbitrary Network.MQTT.Types.ConnectRequest
instance Test.QuickCheck.Arbitrary.Arbitrary Network.MQTT.Types.QoS
instance Test.QuickCheck.Arbitrary.Arbitrary Network.MQTT.Types.SessionReuse
instance Test.QuickCheck.Arbitrary.Arbitrary Network.MQTT.Types.ConnACKFlags
instance Test.QuickCheck.Arbitrary.Arbitrary Network.MQTT.Types.PublishRequest
instance Test.QuickCheck.Arbitrary.Arbitrary Network.MQTT.Types.PubACK
instance Test.QuickCheck.Arbitrary.Arbitrary Network.MQTT.Types.PubREL
instance Test.QuickCheck.Arbitrary.Arbitrary Network.MQTT.Types.PubREC
instance Test.QuickCheck.Arbitrary.Arbitrary Network.MQTT.Types.PubCOMP
instance Test.QuickCheck.Arbitrary.Arbitrary Network.MQTT.Types.SubscribeRequest
instance Test.QuickCheck.Arbitrary.Arbitrary Network.MQTT.Types.SubOptions
instance Test.QuickCheck.Arbitrary.Arbitrary Network.MQTT.Types.SubErr
instance Test.QuickCheck.Arbitrary.Arbitrary Network.MQTT.Types.SubscribeResponse
instance Test.QuickCheck.Arbitrary.Arbitrary Network.MQTT.Types.UnsubscribeRequest
instance Test.QuickCheck.Arbitrary.Arbitrary Network.MQTT.Types.UnsubStatus
instance Test.QuickCheck.Arbitrary.Arbitrary Network.MQTT.Types.UnsubscribeResponse
instance Test.QuickCheck.Arbitrary.Arbitrary Network.MQTT.Types.Property
instance Test.QuickCheck.Arbitrary.Arbitrary Network.MQTT.Types.AuthRequest
instance Test.QuickCheck.Arbitrary.Arbitrary Network.MQTT.Types.ConnACKRC
instance Test.QuickCheck.Arbitrary.Arbitrary Network.MQTT.Types.DiscoReason
instance Test.QuickCheck.Arbitrary.Arbitrary Network.MQTT.Types.DisconnectRequest
instance Test.QuickCheck.Arbitrary.Arbitrary Network.MQTT.Types.MQTTPkt
